define({ entries : {
    "BarrEarlT.2015TOPi": {
        "abstract": "Testing involves examining the behaviour of a system in order to discover potential faults. Given an input for a system, the challenge of distinguishing the corresponding desired, correct behaviour from potentially incorrect behavior is called the \"test oracle problem\". Test oracle automation is important to remove a current bottleneck that inhibits greater overall test automation. Without test oracle automation, the human has to determine whether observed behaviour is correct. The literature on test oracles has introduced techniques for oracle automation, including modelling, specifications, contract-driven development and metamorphic testing. When none of these is completely adequate, the final source of test oracle information remains the human, who may be aware of informal specifications, expectations, norms and domain specific information that provide informal oracle guidance. All forms of test oracles, even the humble human, involve challenges of reducing cost and increasing benefit. This paper provides a comprehensive survey of current approaches to the test oracle problem and an analysis of trends in this important area of software testing research and practice.",
        "address": "LOS ALAMITOS",
        "author": "Barr, Earl T. and Harman, Mark and McMinn, Phil and Shahbaz, Muzammil and Shin Yoo",
        "copyright": "Copyright 2015 Elsevier B.V., All rights reserved.",
        "doi": "10.1109/TSE.2014.2372785",
        "issn": "0098-5589",
        "journal": "IEEE transactions on software engineering",
        "keywords": "type: survey paper, Automatic testing , Automation , Bottlenecks , Computer Science , Computer Science Software Engineering , Engineering , Engineering Electrical & Electronic , Licenses , Probabilistic logic , Reliability , Science & Technology , Software engineering , Software testing , Studies , Technology , Test oracle , Test systems , Testing formalism",
        "language": "eng",
        "number": "5",
        "pages": "507--525",
        "publisher": "IEEE",
        "series": "IEEE Transactions on Software Engineering",
        "title": "The Oracle Problem in Software Testing: A Survey",
        "type": "article",
        "url": "https://ieeexplore.ieee.org/document/6963470",
        "volume": "41",
        "year": "2015"
    },
    "ClarkDavid2012SAit": {
        "abstract": "Fault masking can reduce the effectiveness of a test suite. We propose an information theoretic measure, Squeeziness, as the theoretical basis for avoiding fault masking. We begin by explaining fault masking and the relationship between collisions and fault masking. We then define Squeeziness and demonstrate by experiment that there is a strong correlation between Squeeziness and the likelihood of collisions. We conclude with comments on how Squeeziness could be the foundation for generating test suites that minimise the likelihood of fault masking. \u25ba Relate fault masking to information flow in software. \u25ba Define Squeeziness as loss of information due to execution of a program or path. \u25ba Define a special case of Squeeziness that produce counting metrics on paths. \u25ba Show that the Squeeziness and Domain to Range Ratio produce inconsistent orderings on execution paths. \u25ba Experiments showing correlation between Squeeziness and form of fault masking.",
        "address": "AMSTERDAM",
        "author": "Clark, David and Hierons, Robert M.",
        "copyright": "2012 Elsevier B.V.",
        "doi": "10.1016/j.ipl.2012.01.004",
        "issn": "0020-0190",
        "journal": "Information processing letters",
        "keywords": "type: research paper,Collisions , Computer Science , Computer Science Information Systems , Correlation , Correlation analysis , Fault masking , Faults , Formal methods , Foundations , Information theory , Masking , Science & Technology , Software engineering , Software testing , Studies , Technology",
        "language": "eng",
        "number": "8-9",
        "pages": "335--340",
        "publisher": "Elsevier B.V",
        "series": "Information Processing Letters",
        "title": "Squeeziness: An information theoretic measure for avoiding fault masking",
        "type": "article",
        "url": "https://www.sciencedirect.com/science/article/pii/S002001901200021X?via%3Dihub",
        "volume": "112",
        "year": "2012"
    },
    "DuttaSudakshina2024Lfuv": {
        "abstract": "In model-based fault diagnosis, it is assumed that a correct model of each program being diagnosed is available. In general, these techniques require test cases and user-specified assertions to localize the fault. This paper aims to localize faults in a faulty program without user-specified assertions and without executing the programs, and therefore, without using test cases. Given the faulty and the correct versions of a program, a product code is automatically constructed and assertions are automatically generated. The proposed method is a full y automatic, model-based static approach to fault localization. The proposed method reduces the fault search space by removing equivalent regions from the product code using verification techniques. To identify these components, the bounded model checker CBMC is used. The invoked functions from the correct and the faulty programs are considered uninterpreted functions and MiniSat is used as a backend solver. The proposed method can also be applied on static slices of the correct and faulty programs. Also, the identified fault search space can be analyzed along with the generated counterexample trace to pinpoint the fault. The experimental data is presented that supports the applicability of our approach. We demonstrate the effectiveness of the proposed method using the Siemens TCAS and NTS benchmark suite. It is observed that the method can also successfully localize the wrong safety check bug produced by the LLVM compiler. \u2022The approach works for situations where calls to the recursive procedures are present.\u2022An example with loops is now incorporated.\u2022The tables are now updated with score and time.",
        "author": "Dutta, Sudakshina",
        "copyright": "2023 Elsevier Inc.",
        "doi": "10.1016/j.jss.2023.111897",
        "issn": "0164-1212",
        "journal": "The Journal of systems and software",
        "keywords": "type: research paper,Fault , Localization , Region Static , Verification",
        "language": "eng",
        "pages": "111897",
        "publisher": "Elsevier Inc",
        "series": "Journal of Systems and Software",
        "title": "Localizing faults using verification technique",
        "type": "article",
        "url": "https://www.sciencedirect.com/science/article/pii/S0164121223002923?via%3Dihub",
        "volume": "209",
        "year": "2024"
    },
    "HarmanMark2012SseT": {
        "abstract": "In the past five years there has been a dramatic increase in work on Search-Based Software Engineering (SBSE), an approach to Software Engineering (SE) in which Search-Based Optimization (SBO) algorithms are used to address problems in SE. SBSE has been applied to problems throughout the SE lifecycle, from requirements and project planning to maintenance and reengineering. The approach is attractive because it offers a suite of adaptive automated and semiautomated solutions in situations typified by large complex problem spaces with multiple competing and conflicting objectives. This article 1 provides a review and classification of literature on SBSE. The work identifies research trends and relationships between the techniques applied and the applications to which they have been applied and highlights gaps in the literature and avenues for further research.",
        "address": "NEW YORK",
        "author": "Harman, Mark and Mansouri, S. Afshin and Zhang, Yuanyuan",
        "copyright": "Copyright 2013 Elsevier B.V., All rights reserved.",
        "doi": "10.1145/2379776.2379787",
        "issn": "0360-0300",
        "journal": "ACM computing surveys",
        "keywords": "type: survey paper,Algorithms , Automation , Computer Science , Computer Science Theory & Methods , Life cycles , Optimization algorithms , Problem solving , Science & Technology , search-based techniques , Software engineering , Studies , survey , Technology , Trends",
        "language": "eng",
        "number": "1",
        "pages": "1--61",
        "publisher": "ACM",
        "series": "ACM Computing Surveys",
        "title": "Search-based software engineering: Trends, techniques and applications",
        "type": "article",
        "url": "https://dl.acm.org/doi/10.1145/2379776.2379787",
        "volume": "45",
        "year": "2012"
    },
    "LeGouesC.2012GAGM": {
        "abstract": "This paper describes GenProg, an automated method for repairing defects in off-the-shelf, legacy programs without formal specifications, program annotations, or special coding practices. GenProg uses an extended form of genetic programming to evolve a program variant that retains required functionality but is not susceptible to a given defect, using existing test suites to encode both the defect and required functionality. Structural differencing algorithms and delta debugging reduce the difference between this variant and the original program to a minimal repair. We describe the algorithm and report experimental results of its success on 16 programs totaling 1.25 M lines of C code and 120K lines of module code, spanning eight classes of defects, in 357 seconds, on average. We analyze the generated repairs qualitatively and quantitatively to demonstrate that the process efficiently produces evolved programs that repair the defect, are not fragile input memorizations, and do not lead to serious degradation in functionality.",
        "address": "LOS ALAMITOS",
        "author": "Le Goues, C. and ThanhVu Nguyen and Forrest, S. and Weimer, W.",
        "copyright": "Copyright 2012 Elsevier B.V., All rights reserved.",
        "doi": "10.1109/TSE.2011.104",
        "issn": "0098-5589",
        "journal": "IEEE transactions on software engineering",
        "keywords": "type: research paper,Analysis , Automatic programming , Automation , Computer bugs , Computer programming , Computer Science , Computer Science Software Engineering , corrections , Debugging , Encoding , Engineering , Engineering Electrical & Electronic , Maintenance engineering , Science & Technology , Studies , Syntactics , Technology , Testing , testing and debugging",
        "language": "eng",
        "number": "1",
        "pages": "54--72",
        "publisher": "IEEE",
        "series": "IEEE Transactions on Software Engineering",
        "title": "GenProg: A Generic Method for Automatic Software Repair",
        "type": "article",
        "url": "https://ieeexplore.ieee.org/document/6035728",
        "volume": "38",
        "year": "2012"
    },
    "ThallerHannes2020TFLv": {
        "abstract": "Software testing helps developers to identify bugs. However, awareness of bugs is only the first step. Finding and correcting the faulty program components is equally hard and essential for high-quality software. Fault localization automatically pinpoints the location of an existing bug in a program. It is a hard problem, and existing methods are not yet precise enough for widespread industrial adoption. We propose fault localization via Probabilistic Software Modeling (PSM). PSM analyzes the structure and behavior of a program and synthesizes a network of Probabilistic Models (PMs). Each PM models a method with its inputs and outputs and is capable of evaluating the likelihood of runtime data. We use this likelihood evaluation to find fault locations and their impact on dependent code elements. Results indicate that PSM is a robust framework for accurate fault localization.",
        "address": "Ithaca",
        "author": "Thaller, Hannes and Linsbauer, Lukas and Egyed, Alexander and Fischer, Stefan",
        "copyright": "2020. This work is published under http://arxiv.org/licenses/nonexclusive-distrib/1.0/ (the \u201cLicense\u201d). Notwithstanding the ProQuest Terms and Conditions, you may use this content in accordance with the terms of the License.",
        "doi": "10.48550/arxiv.2001.07409",
        "issn": "2331-8422",
        "journal": "arXiv.org",
        "keywords": "type: working paper,Fault location , Localization , Modelling , Probabilistic models , Software testing",
        "language": "eng",
        "publisher": "Cornell University Library, arXiv.org",
        "series": "ProQuest Dissertations and Theses",
        "title": "Towards Fault Localization via Probabilistic Software Modeling",
        "type": "article",
        "url": "http://arxiv.org/abs/2001.07409",
        "year": "2020"
    },
    "WongW.Eric2016ASoS": {
        "abstract": "Software fault localization, the act of identifying the locations of faults in a program, is widely recognized to be one of the most tedious, time consuming, and expensive - yet equally critical - activities in program debugging. Due to the increasing scale and complexity of software today, manually locating faults when failures occur is rapidly becoming infeasible, and consequently, there is a strong demand for techniques that can guide software developers to the locations of faults in a program with minimal human intervention. This demand in turn has fueled the proposal and development of a broad spectrum of fault localization techniques, each of which aims to streamline the fault localization process and make it more effective by attacking the problem in a unique way. In this article, we catalog and provide a comprehensive overview of such techniques and discuss key issues and concerns that are pertinent to software fault localization as a whole.",
        "address": "LOS ALAMITOS",
        "author": "Wong, W. Eric and Ruizhi Gao and Yihao Li and Abreu, Rui and Wotawa, Franz",
        "copyright": "Copyright 2016 Elsevier B.V., All rights reserved.",
        "doi": "10.1109/TSE.2016.2521368",
        "issn": "0098-5589",
        "journal": "IEEE transactions on software engineering",
        "keywords": "type: survey paper,Complexity theory , Computer bugs , Computer programs , Computer Science , Computer Science Software Engineering , Consumption , Debugging , Demand , Engineering , Engineering Electrical & Electronic , execution trace , Fault diagnosis , Fault location , Faults , program debugging , Proposals , Science & Technology , Software , Software debugging , Software engineering , Software fault localization , software testing , Studies , survey , suspicious code , Technology",
        "language": "eng",
        "number": "8",
        "pages": "707--740",
        "publisher": "IEEE",
        "series": "IEEE Transactions on Software Engineering",
        "title": "A Survey on Software Fault Localization",
        "type": "article",
        "url": "https://ieeexplore.ieee.org/document/7390282",
        "volume": "42",
        "year": "2016"
    },
    "XAndroutsopoulosKelly2014Aaot": {
        "abstract": "Failed error propagation (FEP) is known to hamper software testing, yet it remains poorly understood. We introduce an information theoretic formulation of FEP that is based on measures of conditional entropy. This formulation considers the situation in which we are interested in the potential for an incorrect program state at statement s to fail to propagate to incorrect output. We define five metrics that differ in two ways: whether we only consider parts of the program that can be reached after executing s and whether we restrict attention to a single program path of interest .We give the results of experiments in which it was found that on average one in 10 tests suffered from FEP, earlier studies having shown that this figure can vary significantly between programs. The experiments also showed that our metrics are well-correlated with FEP. Our empirical study involved 30 programs, for which we executed a total of 7,140,000 test cases. The results reveal that the metrics differ in their performance but the Spearman rank correlation with failed error propagation is close to 0.95 for two of the metrics. These strong correlations in an experimental setting, in which all information about both FEP and conditional entropy is known, open up the possibility in the longer term of devising inexpensive information theory based metrics that allow us to minimise the effect of FEP.",
        "address": "NEW YORK",
        "author": "Androutsopoulos, Kelly and Clark, David and Dan, Haitao and Hierons, Robert M and Harman, Mark",
        "booktitle": "36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014)",
        "copyright": "Copyright 2016 Elsevier B.V., All rights reserved.",
        "doi": "10.1145/2568225.2568314",
        "isbn": "1450327567",
        "issn": "0270-5257",
        "keywords": "type: conference paper, Computer Science , Computer Science Software Engineering , Information Theory , Program Analysis , Science & Technology , Technology",
        "language": "eng",
        "pages": "573--583",
        "publisher": "ACM",
        "series": "Proceedings of the International Conference on Software Engineering (ICSE)",
        "title": "An analysis of the relationship between conditional entropy and failed error propagation in software testing",
        "type": "inproceedings",
        "url": "https://dl.acm.org/doi/abs/10.1145/2568225.2568314",
        "year": "2014"
    },
    "YuXiao2017TBNb": {
        "abstract": "\u2022A novel probabilistic graphical model called Bayesian Network based Program Dependence Graph (BNPDG) is proposed.\u2022A BNPDG-based fault localization approach is proposed.\u2022An empirical study is conducted on the Siemens suite and Space.\u2022The results show that our approach is effective for fault localization. Fault localization is an important and expensive task in software debugging. Some probabilistic graphical models such as probabilistic program dependence graph (PPDG) have been used in fault localization. However, PPDG is insufficient to reason across nonadjacent nodes and only support making inference about local anomaly. In this paper, we propose a novel probabilistic graphical model called Bayesian Network based Program Dependence Graph (BNPDG) that has the excellent inference capability for reasoning across nonadjacent nodes. We focus on applying the BNPDG to fault localization. Compared with the PPDG, our BNPDG-based fault localization approach overcomes the reasoning limitation across nonadjacent nodes and provides more precise fault localization by taking its output nodes as the common conditions to calculate the conditional probability of each non-output node. The experimental results show that our BNPDG-based fault localization approach can significantly improve the effectiveness of fault localization.",
        "address": "NEW YORK",
        "author": "Yu, Xiao and Liu, Jin and Yang, Zijiang and Liu, Xiao",
        "copyright": "2017 Elsevier Inc.",
        "doi": "10.1016/j.jss.2017.08.025",
        "issn": "0164-1212",
        "journal": "The Journal of systems and software",
        "keywords": "type: research paper,Bayesian network , Computer Science , Computer Science Software Engineering , Computer Science Theory & Methods , Fault localization , Program analysis , Science & Technology , Technology",
        "language": "eng",
        "pages": "44--53",
        "publisher": "Elsevier Inc",
        "series": "Journal of Systems and Software",
        "title": "The Bayesian Network based program dependence graph and its application to fault localization",
        "type": "article",
        "url": "https://www.sciencedirect.com/science/article/pii/S0164121217301796?via%3Dihub",
        "volume": "134",
        "year": "2017"
    },
    "ZengMuhan2022FLvE": {
        "abstract": "Testing-based fault localization has been a significant topic in software engineering in the past decades. It localizes a faulty program element based on a set of passing and failing test executions. Since whether a fault could be triggered and detected by a test is related to program semantics, it is crucial to model program semantics in fault localization approaches. Existing approaches either consider the full semantics of the program (e.g., mutation-based fault localization and angelic debugging), leading to scalability issues, or ignore the semantics of the program (e.g., spectrum-based fault localization), leading to imprecise localization results. Our key idea is: by modeling only the correctness of program values but not their full semantics, a balance could be reached between effectiveness and scalability. To realize this idea, we introduce a probabilistic approach to model program semantics and utilize information from static analysis and dynamic execution traces in our modeling. Our approach, SmartFL (SeMantics bAsed pRobabilisTic Fault Localization), is evaluated on a real-world dataset, Defects4J. The top-1 statement-level accuracy of our approach is 21 %, which is the best among state-of-the-art methods. The average time cost is 210 seconds per fault while existing methods that capture full semantics are often 10x or more slower.",
        "address": "LOS ALAMITOS",
        "author": "Zeng, Muhan and Wu, Yiqian and Ye, Zhentao and Xiong, Yingfei and Zhang, Xin and Zhang, Lu",
        "booktitle": "2022 ACM/IEEE 44TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2022)",
        "copyright": "Copyright 2022 Elsevier B.V., All rights reserved.",
        "doi": "10.1145/3510003.3510073",
        "isbn": "9781450392211",
        "issn": "0270-5257",
        "keywords": "type: conference paper, Analytical models , Computer Science , Computer Science Software Engineering , Computer Science Theory & Methods , Debugging , fault localization , Location awareness , Probabilistic logic , probabilistic modeling , Scalability , Science & Technology , Semantics , Static analysis , Technology",
        "language": "eng",
        "organization": "IEEE Comp Soc",
        "pages": "958--969",
        "publisher": "ACM",
        "series": "Proceedings of the International Conference on Software Engineering (ICSE)",
        "title": "Fault Localization via Efficient Probabilistic Modeling of Program Semantics",
        "type": "inproceedings",
        "url": "https://ieeexplore.ieee.org/document/9793888",
        "volume": "2022-",
        "year": "2022"
    }
}});